<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My ToDo App</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            color: #333;
            margin: 0;
            padding: 0;
        }

        h1 {
            background-color: #007BFF;
            color: white;
            margin: 0;
            padding: 20px;
            text-align: center;
        }

        .container {
            max-width: 600px;
            margin: 20px auto;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }

        ul {
            list-style: none;
            padding: 0;
        }

        li {
            background: #fff;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            padding: 10px;
            position: relative;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        li.completed {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        li a {
            color: #333;
            text-decoration: none;
            font-weight: bold;
        }

        li a:hover {
            color: #007BFF;
        }

        .delete-btn {
            color: red;
        }

        .edit-btn {
            color: #FFC107;
        }

        .complete-btn {
            color: #28a745;
        }

        form {
            background: #fff;
            padding: 20px;
            margin-top: 20px;
        }

        label {
            display: block;
            margin-bottom: 10px;
        }

        input[type="text"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
        }

        input[type="submit"] {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
        }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

        #speechButton {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-top: 10px;
            cursor: pointer;
        }

        #speechButton:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <h1>Welcome to My ToDo App</h1>
    <div class="container">
        <h2>Tasks</h2>
        <ul id="taskList">
            <!-- Tasks will be displayed here -->
        </ul>

        <h2>Add a New Task</h2>
        <form id="addTaskForm" action="/todo/add/" method="post">
            <label for="newtodo">Add a New ToDo:</label>
            <input type="text" name="newtodo" id="newtodo" autofocus />
            <input type="submit" value="Add" />
            <button id="speechButton">Add by Speech</button>
        </form>
    </div>

    <script>
        const taskList = document.getElementById("taskList");
        const addTaskForm = document.getElementById("addTaskForm");
        const newTodoInput = document.getElementById("newtodo");
        const speechButton = document.getElementById("speechButton");

        // Function to add a new task to the list
        function addTask(taskText) {
            const li = document.createElement("li");
            li.innerHTML = `
                <div>
                    ${taskText}
                </div>
                <div>
                    <a href="#" class="complete-btn">✓</a>
                    <a href="#" class="delete-btn">✘</a>
                    <a href="#" class="edit-btn">✎</a>
                </div>
            `;
            taskList.appendChild(li);
        }

        // Event listener for adding a new task
        addTaskForm.addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent form submission

            const newTaskText = newTodoInput.value.trim();

            if (newTaskText !== '') {
                addTask(newTaskText);
                newTodoInput.value = ''; // Clear the input field
            }
        });

        // Event delegation for handling task list actions
        taskList.addEventListener("click", function (event) {
            if (event.target.matches(".complete-btn")) {
                const listItem = event.target.closest("li");
                listItem.classList.toggle('completed');
            } else if (event.target.matches(".delete-btn")) {
                const listItem = event.target.closest("li");
                listItem.remove();
            } else if (event.target.matches(".edit-btn")) {
                const listItem = event.target.closest("li");
                const taskText = listItem.querySelector("div").textContent;
                const newTaskText = prompt("Edit Task:", taskText);

                if (newTaskText !== null && newTaskText.trim() !== '') {
                    listItem.querySelector("div").textContent = newTaskText;
                }
            }
        });

        // Event listener for adding a task by speech
        speechButton.addEventListener("click", function () {
            const recognition = new webkitSpeechRecognition() || new SpeechRecognition();

            recognition.onresult = function (event) {
                const transcript = event.results[0][0].transcript;
                addTask(transcript);
            };

            recognition.start();
        });

    </script>
</body>
</html>
